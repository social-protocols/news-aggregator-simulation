package simulation

import probability_monad._

object Data {
  val updateSize              = 1500 // TODO: source for this number
  val updateIntervalSeconds   = 15   // TODO: source for this number
  val newFrontPageVotingRatio =
    0.0847554613080211 // select (select cast(sum(gain) as real) from dataset where newrank is not null and toprank is null) / (select sum(gain) from dataset where newrank is null and toprank is not null);
  val minScoreToAppearOnFrontpage =
    3 // select count(*), score, id from dataset where toprank is not null group by score limit 10;

  val nextSubmissionArrivalDelay = {
    // TODO: depend on time-of-day and day-of-week
    val averageSubmissionArrivalSeconds = 78.290865 // from bigquery 2021
    Distribution.exponential(
      1.0 / averageSubmissionArrivalSeconds,
    )
  }

  val baselineVotesOnNewRankPerSecond    = Array[Double](
    0.000267743532747135, 0.000415619684721948, 0.000450066599056809, 0.000407676033648209, 0.000375169035529885, 0.000327017857715631, 0.000325985154823033, 0.000293210524893678, 0.000278415850365691, 0.000254581795967664, 0.000249704857341945, 0.000220056663501742, 0.000200397671203723, 0.000199304938079218, 0.00018748071552563, 0.00017568670465209, 0.000168566401555054, 0.000158053354932069, 0.000159141482318337, 0.000158877229271087, 0.000153854286619699, 0.000138289483922104, 0.000130939308097266, 0.000128644338547776, 0.000121276926469106, 0.000119722610564824, 0.000118439167179928, 0.000107146058380174, 0.000105268318339163, 0.00010637640025258, 9.19418148481073e-05, 8.27434334763385e-05, 7.01439654058563e-05, 6.63216325983729e-05, 6.26424815826742e-05, 6.59013118656375e-05, 5.39778031706073e-05, 5.68137884127031e-05, 5.47831741956984e-05, 5.31553660937719e-05, 4.45414711040153e-05, 5.02891006520432e-05, 5.14471581920937e-05, 4.72606479789824e-05, 4.66696647787267e-05, 4.38782014840853e-05, 4.00299542418331e-05, 4.01765597664e-05, 3.95973216641425e-05, 4.35029837584923e-05, 4.42305421089749e-05, 4.26688927465816e-05, 4.35543366584277e-05, 4.16347148685685e-05, 3.68792072006576e-05, 4.1070039717657e-05, 3.74471045800204e-05, 3.80193506178552e-05, 3.66328230607414e-05, 3.69700079482411e-05, 3.59102895776512e-05, 3.91483771452986e-05, 3.26987561537974e-05, 3.50973047117254e-05, 3.0651410897285e-05, 3.03985312613148e-05, 3.52285905065015e-05, 3.34734718363507e-05, 3.04764183710217e-05, 3.03022173275127e-05, 3.40103839837201e-05, 2.98968595362997e-05, 3.09285798237928e-05, 2.66715537208521e-05, 3.08445354448296e-05, 2.80746151950448e-05, 3.28793682965893e-05, 2.56016896784216e-05, 2.47740788738635e-05, 2.61463683269022e-05, 2.57284538866252e-05, 2.37739813720327e-05, 2.47884699746837e-05, 2.78527572089674e-05, 2.586411572565e-05, 2.57888800831702e-05, 2.4793397297703e-05, 2.83335655859516e-05, 2.83592752600802e-05, 2.28401406733348e-05
  )


  val voteGainOnNewRankPerSecond    = Array[Double](
    0.000654966218191233, 0.000606784959087984, 0.000572545099286591, 0.000508358237063689, 0.00045249875748292, 0.000415009983613446, 0.000404173794731735, 0.000369231776340967, 0.000351933923231954, 0.000327348553380046, 0.000324601864564532, 0.000296843324645236, 0.000265817714591884, 0.00026108704296687, 0.000247579573498703, 0.000239614078517249, 0.000231050527487688, 0.000225315736736914, 0.00021675019741189, 0.000216576392768373, 0.000208299364095875, 0.000198909940871231, 0.000185364678308773, 0.000185308907749707, 0.000174929283906506, 0.000170340013660519, 0.000174211179571095, 0.000160023600002226, 0.000155573989816467, 0.000153104026845638, 0.000131007426089393, 0.000116550116550117, 0.000104427030556869, 9.66834063046049e-05, 8.75562609091707e-05, 9.4020786217061e-05, 8.11184470402347e-05, 8.42479036972956e-05, 7.85165623092104e-05, 8.13843549546795e-05, 6.77720025067134e-05, 7.4060174958279e-05, 7.40911065123528e-05, 6.91480280006829e-05, 7.01056846751533e-05, 6.36235304810677e-05, 6.17283950617284e-05, 6.12938549710596e-05, 6.0829325419836e-05, 6.36790235313224e-05, 6.51398011311804e-05, 6.5026521734192e-05, 6.35600450465823e-05, 6.3136160809508e-05, 5.98607032923387e-05, 5.96714659574287e-05, 5.76174542474734e-05, 5.80725052307955e-05, 5.51245986417754e-05, 5.66151283608994e-05, 5.40977631998542e-05, 5.79813947936118e-05, 4.86615933763485e-05, 5.306043483951e-05, 4.78097173250463e-05, 4.93008374038492e-05, 5.1464901505846e-05, 4.77522341223822e-05, 4.49558408449422e-05, 4.43353113703022e-05, 5.0454949716084e-05, 4.64228753702438e-05, 4.46157081393829e-05, 3.93856408768921e-05, 4.46326098599811e-05, 4.35216530856427e-05, 4.87644450492748e-05, 4.09228093508619e-05, 3.98225699020733e-05, 4.30039768033995e-05, 4.13586017393275e-05, 3.9665675024791e-05, 3.80792217682915e-05, 4.27517397976229e-05, 3.85415426819246e-05, 3.96869268428199e-05, 3.87360182766148e-05, 4.23621113276286e-05, 4.29120331551919e-05, 3.84190558517024e-05
  )

  // val voteGainOnNewRankDistribution = Distribution.discrete(
  //   voteGainOnNewRankPerSecond.zipWithIndex.map { case (d, i) => (i, d) }: _*,
  // )

  val baselineVotesOnTopRankPerSecond    = Array[Double](
     0.0159581304557905, 0.011146792021691, 0.00904159841680155, 0.00774782830279373, 0.00683703678817965, 0.00627115192865242, 0.00575168964213894, 0.00523937342416749, 0.0049825510187022, 0.00467165532286806, 0.00444290482604377, 0.00408884470597391, 0.0039212749233595, 0.0037906398521582, 0.00366012068015303, 0.00350256122536002, 0.00335036419971732, 0.00320649693273432, 0.00314659266532786, 0.0030592607572784, 0.00288423076529343, 0.00279739213383849, 0.00268120853239976, 0.00256012181039494, 0.00258224796675676, 0.00250959533783523, 0.00252051387475221, 0.00245454214868708, 0.00247802434322549, 0.00232866370779258, 0.00183221190128731, 0.00155412614694083, 0.00143719840262643, 0.00134894976154715, 0.00129608272033386, 0.0012261930470839, 0.00121656663820383, 0.00116013783976463, 0.00115178737104424, 0.00109399586817798, 0.00110119279820428, 0.00105343185467199, 0.00102017033015917, 0.00103039390826324, 0.00101567385619953, 0.0010137975663296, 0.000982256467543521, 0.000960108950745017, 0.000931286674815857, 0.000921820105771657, 0.000898103129072125, 0.00090929193154478, 0.000902691062754009, 0.000893120530163686, 0.000876054593955905, 0.000869369063774015, 0.000866486234617392, 0.000863123992014943, 0.000866580472106348, 0.00085543175170419, 0.000823528751718566, 0.000789563303575924, 0.000763898683862916, 0.000752077443053863, 0.000761139953888049, 0.000748261205471783, 0.000757976252954951, 0.000720674174931726, 0.000757256465399291, 0.000726408168871177, 0.000687563993621354, 0.000728350108636934, 0.000746346132261394, 0.000708898806858188, 0.000708412147637309, 0.000687766312619829, 0.00070882936912201, 0.000709598153989813, 0.000725366530343878, 0.000710131754711478, 0.00072866080347474, 0.00072280793570845, 0.000702392434091941, 0.000725809897589284, 0.000714994399730276, 0.000672996689290686, 0.000682216778722275, 0.000685985974776454, 0.000692542152563349, 0.000775415943220856
  )

  val voteGainOnTopRankPerSecond    = Array[Double]( 
    0.0200593988709662, 0.0119157495729015, 0.00929524042286054, 0.00801458766134965, 0.00703478850917008, 0.00628292313932164, 0.00573912167294486, 0.00531679821364884, 0.00498325737140731, 0.00477480900247082, 0.00446153965339593, 0.00416440705103374, 0.00388471371923769, 0.0038256295775294, 0.00365485033741149, 0.0034541863844692, 0.00328343232574514, 0.0031319828385843, 0.00301662220398112, 0.00296891833459145, 0.00274614828492433, 0.00264583623527342, 0.00249067143663541, 0.00240784526153719, 0.00237111416647164, 0.00231482156482521, 0.00227510491988708, 0.00223191249682038, 0.0022380855357628, 0.00211612617738163, 0.00150793535200532, 0.0012007740686986, 0.00107799106603887, 0.00101851918720676, 0.000969627405118728, 0.000917573423900895, 0.000916956181195251, 0.000860972683979874, 0.00085179632806231, 0.0008212918809637, 0.000820205249313596, 0.000779139131644999, 0.000769011130866259, 0.000750264481723773, 0.000740708748137431, 0.000733966079253945, 0.000687840203342685, 0.000668920782226059, 0.000645733673824168, 0.000640421834741446, 0.00063460109761066, 0.000613005885623358, 0.000597891739530603, 0.000592935118730853, 0.000551827960082367, 0.000558155809110234, 0.000543815625172264, 0.000541387764492728, 0.000524038922442719, 0.00050779181254598, 0.000462393807589537, 0.000409911691050481, 0.000393216829967867, 0.0003868752366301, 0.000362506411270414, 0.000348590300346074, 0.000339373022720736, 0.000325328923718456, 0.000341390582460984, 0.000322436860608065, 0.000313140391874888, 0.00029961792721921, 0.00031366229505838, 0.000287606428764959, 0.000281563522600597, 0.000273208328540205, 0.00027135545887119, 0.000264980189405107, 0.000269076247459057, 0.000254649602147445, 0.000263629653063377, 0.000254002942600127, 0.000242624223602484, 0.000243098238526218, 0.000240452006642082, 0.000229305040397941, 0.000240325289744124, 0.000245839772849801, 0.000240807964633577, 0.000285018042756301
   ) 

  // val voteGainOnTopRankDistribution = Distribution.discrete(
  //   voteGainOnTopRankPerSecond.zipWithIndex.map { case (d, i) => (i, d) }: _*,
  // )

  // these are just guesses
  val qualityDistribution              = Distribution.normal.map(x => Math.exp(-0.23 + (x * .21)))

//  -4, .27 works greaet except for top four, with coefficient .35 
  // val qualityDistribution              = Distribution.normal.map(x => (x * 0.1) + 1)
  // val qualityDistribution = Distribution.lognormal
  // val qualityDistribution = Distribution.uniform
  def voteDistribution(lambda: Double) = Distribution.poisson(lambda)
}
