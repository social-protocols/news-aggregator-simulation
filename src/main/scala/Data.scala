package simulation

import probability_monad._

object Data {
  val updateSize              = 1500 // TODO: source for this number
  val updateIntervalSeconds   = 15   // TODO: source for this number
  val newFrontPageVotingRatio =
    0.0847554613080211 // select (select cast(sum(gain) as real) from dataset where newrank is not null and toprank is null) / (select sum(gain) from dataset where newrank is null and toprank is not null);
  val minScoreToAppearOnFrontpage =
    3 // select count(*), score, id from dataset where toprank is not null group by score limit 10;

  val nextSubmissionArrivalDelay = {
    // TODO: depend on time-of-day and day-of-week
    val averageSubmissionArrivalSeconds = 78.290865 // from bigquery 2021
    Distribution.exponential(
      1.0 / averageSubmissionArrivalSeconds,
    )
  }

  val nextVoteArrivalDelay = {
    val averageVoteArrivalSeconds =
      1.0 / (6106438.0 / 365 / 24 / 3600) // ~5 from bigquery
    Distribution.exponential(
      1.0 / averageVoteArrivalSeconds,
    )
  }

  // select group_concat(rankgain, ', ') from (select cast(sum(gain) as real) / (select max(sampleTime)-min(sampleTime) from dataset) as rankgain from dataset where newRank is not null and topRank is null group by newRank order by newRank);
  val voteGainOnNewRankPerSecond    = Array[Double](
    0.000367950211080009, 0.000515815917023342, 0.000525414618181951, 0.000473078842817155, 0.000415943716873054,
    0.000379148695765053, 0.00035903713143273, 0.000324527515362493, 0.000305558653549051, 0.000284075846194069,
    0.000276991090577001, 0.000252308716169149, 0.000220541586144229, 0.000225112396219757, 0.000212542668512055,
    0.000197687535766589, 0.00019700191425526, 0.000196544833247707, 0.000186489051081545, 0.000190374239645744,
    0.000172319539847408, 0.000169805594305868, 0.000154950461560401, 0.000143751976875358, 0.000146037381913122,
    0.00014169511234137, 0.000140095328814935, 0.000134610356724302, 0.000127982682114786, 0.000130496627656326,
    0.00010421446972204, 9.05020394954557e-05, 8.86737154652445e-05, 8.31887433746108e-05, 6.83336106291446e-05,
    7.67896092688715e-05, 6.21630170271817e-05, 6.28486385385109e-05, 5.69065854403244e-05, 6.19344765234053e-05,
    5.02789108308087e-05, 5.37070183874548e-05, 5.48497209063368e-05, 6.05632335007469e-05, 5.82778284629828e-05,
    5.00503703270323e-05, 4.68508032741627e-05, 5.14216133496907e-05, 4.73078842817155e-05, 4.82220462968211e-05,
    4.38797767250694e-05, 4.79935057930447e-05, 4.50224792439514e-05, 4.59366412590571e-05, 4.29656147099638e-05,
    4.38797767250694e-05, 4.43368577326222e-05, 4.57081007552807e-05, 4.52510197477279e-05, 4.29656147099638e-05,
    4.2508533702411e-05, 4.43368577326222e-05, 3.65664806042245e-05, 4.4793938740175e-05, 3.70235616117773e-05,
    3.54237780853425e-05, 3.88518856419886e-05, 3.74806426193301e-05, 2.92531844833796e-05, 2.97102654909324e-05,
    3.81662641306593e-05, 3.54237780853425e-05, 3.42810755664605e-05, 2.8339022468274e-05, 3.33669135513549e-05,
    3.49666970777897e-05, 3.47381565740133e-05, 3.17671300249201e-05, 3.0624427506038e-05, 3.0624427506038e-05,
    3.24527515362493e-05, 2.65106984380628e-05, 3.08529680098144e-05, 3.17671300249201e-05, 2.7196319949392e-05,
    2.85675629720504e-05, 2.87961034758268e-05, 3.17671300249201e-05, 3.77091831231065e-05, 3.0624427506038e-05,
  )
  val voteGainOnNewRankDistribution = Distribution.discrete(
    voteGainOnNewRankPerSecond.zipWithIndex.map { case (d, i) => (i, d) }: _*,
  )

  // select group_concat(rankgain, ', ') from (select cast(sum(gain) as real) / (select max(sampleTime)-min(sampleTime) from dataset) as rankgain from dataset where topRank is not null group by topRank order by topRank);
  val voteGainOnTopRankPerSecond    = Array[Double](
    0.0198546848060788, 0.0117828627532, 0.00927257385972001, 0.00801422984592713, 0.007039276056817,
    0.00595005201581866, 0.00521095202660577, 0.00486654148741473, 0.00452281656973502, 0.00429359044444729,
    0.00402665513603645, 0.00371698275341942, 0.00349575554576386, 0.00348455706107882, 0.0034073103708024,
    0.00317145657090515, 0.00307615518083039, 0.00300027973357662, 0.00289995045241878, 0.00280670592687801,
    0.00263118681997773, 0.00251783073010464, 0.00240104653267489, 0.002308944709653, 0.00227900590365829,
    0.00223238364088791, 0.00220084505136676, 0.00213342560275272, 0.00211811338899971, 0.00204178086073839,
    0.00143660560673847, 0.00115367246306328, 0.00105654274895831, 0.000972668384072372, 0.000929017147851079,
    0.000885365911629786, 0.000904106232939451, 0.000828687866693238, 0.000829144947700791, 0.000805376735308045,
    0.000807662140345809, 0.000754183662462131, 0.000740014151227994, 0.000718531343873012, 0.000725159018482528,
    0.000710760966744614, 0.000656596867349607, 0.000639684870070153, 0.000635114059994625, 0.000605403794503692,
    0.000608374821052786, 0.000584835149163816, 0.000580035798584512, 0.000555581964680436, 0.000519929646091318,
    0.000526557320700833, 0.000542783696468958, 0.000521072348610199, 0.000511016566444038, 0.000484277327502199,
    0.000434455497678943, 0.000398574638586047, 0.000374806426193301, 0.000372521021155537, 0.000350809673296779,
    0.00033869702659663, 0.000323613353347387, 0.000310586544632132, 0.000319728164783188, 0.000302816167503734,
    0.000287275413246939, 0.000276305469065672, 0.000309900923120803, 0.000279276495614765, 0.000271277577982591,
    0.000263278660350417, 0.000266021146395733, 0.000260764714808876, 0.000259393471786218, 0.000245452501055857,
    0.000256422445237124, 0.000237682123927459, 0.000227397801257521, 0.000232654232844379, 0.000217799100098912,
    0.000219398883625347, 0.00022556947722731, 0.000247052284582292, 0.000232654232844379, 0.000271506118486367,
  )
  val voteGainOnTopRankDistribution = Distribution.discrete(
    voteGainOnTopRankPerSecond.zipWithIndex.map { case (d, i) => (i, d) }: _*,
  )

  // val qualityDistribution = Distribution.normal * 0.1 + 0.5
  val qualityDistribution = Distribution.lognormal
  // val qualityDistribution = Distribution.uniform
}
