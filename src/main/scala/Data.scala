package simulation

import probability_monad._

object Data {
  val updateSize              = 1500
  val updateIntervalSeconds   = 10
  val frontpageSize           = 90
  val newPageSize             = 90
  val newFrontPageVotingRatio =
    0.0847554613080211 // select (select cast(sum(gain) as real) from dataset where newrank is not null and toprank is null) / (select sum(gain) from dataset where newrank is null and toprank is not null);
  val minScoreToAppearOnFrontpage =
    3 // select count(*), score, id from dataset where toprank is not null group by score limit 10;

  val nextSubmissionArrivalDelay = {
    val averageSubmissionArrivalSeconds = 78.290865 // from bigquery 2021
    Distribution.exponential(
      1.0 / averageSubmissionArrivalSeconds,
    )
  }

  val nextVoteArrivalDelay = {
    val averageVoteArrivalSeconds =
      1.0 / (6106438.0 / 365 / 24 / 3600) // ~5 from bigquery
    Distribution.exponential(
      1.0 / averageVoteArrivalSeconds,
    )
  }

  // select sum(gain) as rankgain from dataset where samplingWindow >= 3 and newRank is not null and topRank is null and showRank = -1 and askRank = -1 group by newRank order by newRank;
  val voteGainOnNewRankDistribution = Distribution.discrete(
    Array[Double](
      1464, 2017, 2162, 1948, 1887, 1784, 1635, 1535, 1445, 1353, 1296, 1171, 1099, 1069, 1028, 973, 947, 886, 925, 854,
      837, 787, 807, 747, 655, 627, 592, 577, 624, 546, 495, 467, 407, 354, 362, 387, 385, 333, 336, 296, 266, 321, 293,
      259, 253, 254, 273, 233, 260, 246, 228, 206, 233, 187, 193, 235, 208, 218, 179, 234, 197, 187, 170, 171, 183, 178,
      193, 164, 149, 161, 166, 145, 141, 163, 157, 140, 132, 144, 141, 134, 149, 137, 133, 164, 116, 153, 157, 133, 154,
      147,
    ).zipWithIndex.map { case (d, i) => (i, d) }: _*,
  )

  // select sum(gain) as rankgain from dataset where samplingWindow >= 3 and topRank is not null group by topRank order by topRank;
  val voteGainOnTopRankDistribution = Distribution.discrete(
    Array[Double](
      100481, 57457, 44419, 37889, 33027, 28484, 25084, 23950, 22680, 20959, 19343, 17739, 17320, 15863, 15862, 15325,
      15109, 14478, 14006, 13215, 12963, 12159, 11869, 11447, 11249, 10979, 10970, 10640, 10569, 10370, 6871, 5278,
      4855, 4199, 4232, 4028, 3920, 3646, 3411, 3573, 3251, 3242, 3240, 3027, 3129, 2913, 2611, 2616, 2521, 2548, 2408,
      2452, 2271, 2190, 2190, 2128, 2050, 2061, 1946, 1983, 1824, 1592, 1375, 1319, 1275, 1228, 1247, 1200, 1160, 1151,
      1085, 1115, 1022, 1022, 977, 949, 929, 933, 916, 961, 867, 910, 830, 859, 801, 843, 768, 863, 827, 971,
    ).zipWithIndex.map { case (d, i) => (i, d) }: _*,
  )

  val qualityDistribution = Distribution.discrete(
    Array[(Double, Double)](
      (0.00123365408339502, 1800),
      (0.00297619047619048, 2605),
      (0.00308641975308642, 2480),
      (0.0040650406504065, 1880),
      (0.005, 1296),
      (0.00606060606060606, 1003),
      (0.00712250712250712, 776),
      (0.00873015873015873, 649),
      (0.00938967136150235, 534),
      (0.0107843137254902, 490),
      (0.0111111111111111, 415),
      (0.0121212121212121, 400),
      (0.0135911441044521, 360),
      (0.0142112864954091, 321),
      (0.0158730158730159, 281),
      (0.0168776371308017, 294),
      (0.0175438596491228, 264),
      (0.018018018018018, 230),
      (0.0193859121011439, 203),
      (0.0201916495550992, 184),
      (0.0211362412493269, 163),
      (0.0221060924369747, 153),
      (0.0238665389527458, 156),
      (0.0242616033755274, 107),
      (0.0256784434203789, 124),
      (0.0261937876680575, 108),
      (0.0273038523861795, 90),
      (0.0281385281385281, 69),
      (0.0291911361678804, 64),
      (0.0300904977375566, 64),
      (0.03125, 56),
      (0.0328141225337487, 43),
      (0.0330459770114942, 37),
      (0.0340624539696568, 40),
      (0.0353535353535354, 33),
      (0.0364653094532836, 33),
      (0.0376984126984127, 25),
      (0.0387596899224806, 32),
      (0.0391156462585034, 22),
      (0.040667606958157, 26),
      (0.0415244596131968, 23),
      (0.0427521625934325, 22),
      (0.043702740110025, 20),
      (0.0449628127112914, 15),
      (0.0451070336391437, 15),
      (0.0461203897007655, 16),
      (0.0473504273504273, 19),
      (0.0489583333333333, 15),
      (0.0496342737722048, 19),
      (0.0506666666666667, 17),
      (0.0518867924528302, 11),
      (0.0526731319159517, 10),
      (0.0531400966183575, 10),
      (0.0542131350681537, 13),
      (0.0555555555555556, 7),
      (0.0568042813455657, 11),
      (0.0579710144927536, 10),
      (0.0585585585585586, 8),
      (0.0593567251461988, 8),
      (0.0608527131782946, 4),
      (0.0616370808678501, 10),
      (0.0628333333333333, 7),
      (0.0633979885057471, 12),
      (0.0644161316211878, 6),
      (0.0655381944444444, 5),
      (0.0662295081967213, 9),
      (0.0673175745118191, 4),
      (0.0684079601990049, 8),
      (0.06953125, 10),
      (0.0709643660087444, 6),
      (0.0717524509803922, 4),
      (0.0721794871794872, 7),
      (0.0739064856711916, 9),
      (0.0742821473158552, 12),
      (0.075, 4),
      (0.0768463073852296, 6),
      (0.0775663206459054, 4),
      (0.0787781350482315, 2),
      (0.0794740618902487, 6),
      (0.0808908045977011, 4),
      (0.0817182817182817, 6),
      (0.0825617283950617, 1),
      (0.0832210998877665, 2),
      (0.0844551282051282, 2),
      (0.0853840417598807, 3),
      (0.0866666666666667, 1),
      (0.0876554583141409, 7),
      (0.0883040935672515, 6),
      (0.0891136801541426, 3),
      (0.0908045977011494, 3),
      (0.0912529550827423, 2),
      (0.092687074829932, 2),
      (0.0931142682820534, 5),
      (0.0947916666666666, 7),
      (0.0953947368421053, 2),
      (0.0965079365079365, 4),
      (0.0976744186046511, 3),
      (0.0983024691358024, 4),
      (0.099780701754386, 1),
      (0.100735294117647, 7),
      (0.101844070961718, 4),
      (0.102164502164502, 3),
      (0.103354224698236, 4),
      (0.104354354354354, 2),
      (0.105112881806109, 1),
      (0.106884057971014, 1),
      (0.107323232323232, 5),
      (0.108558558558559, 2),
      (0.109580291970803, 4),
      (0.111488673139159, 3),
      (0.112925170068027, 3),
      (0.114650364650365, 2),
      (0.11518018018018, 3),
      (0.116754850088183, 3),
      (0.118679430535101, 3),
      (0.120872274143302, 2),
      (0.122286821705426, 1),
      (0.123417721518987, 1),
      (0.124458874458874, 1),
      (0.126190476190476, 1),
      (0.13037037037037, 1),
      (0.131746031746032, 2),
      (0.133918128654971, 2),
      (0.135446231472722, 1),
      (0.13671875, 1),
      (0.138205128205128, 1),
      (0.13969298245614, 2),
      (0.141798941798942, 1),
      (0.142590742590743, 2),
      (0.143617021276596, 1),
      (0.145388954479864, 1),
      (0.147783251231527, 2),
      (0.14905273937532, 1),
      (0.150550314465409, 1),
      (0.152610441767068, 1),
      (0.153030303030303, 1),
      (0.154589371980676, 1),
      (0.155194805194805, 2),
      (0.160949612403101, 1),
      (0.164285714285714, 1),
      (0.165686274509804, 1),
      (0.170940170940171, 1),
      (0.174298245614035, 1),
      (0.179568452380952, 1),
      (0.181024632859495, 1),
      (0.191531042796866, 1),
      (0.230069555912253, 1),
    ): _*,
  )
}
